name: Build Pastella Miner

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create draft release'
        required: true
        type: boolean
        default: false
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        type: string
        default: ''
      release_notes:
        description: 'Custom release notes (leave empty for auto-generated)'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup CUDA Toolkit 12.1
      uses: Jimver/cuda-toolkit@v0.2.24
      id: cuda-toolkit
      with:
        cuda: '12.1.0'
        method: 'network'

    - name: Verify CUDA installation (REQUIRED)
      run: |
        echo "Installed CUDA version: ${{steps.cuda-toolkit.outputs.cuda}}"
        echo "CUDA install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
        nvcc -V
        if ($LASTEXITCODE -ne 0) {
          Write-Error "❌ CUDA Toolkit 12.1+ is REQUIRED for building Pastella Miner"
          exit 1
        }
        Write-Host "✅ CUDA Toolkit installed successfully"

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Test executable exists
      run: |
        if (Test-Path "build\Release\pastella-miner.exe") {
          Write-Host "✅ Build successful - pastella-miner.exe found"
          Get-Item "build\Release\pastella-miner.exe" | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "❌ Build failed - pastella-miner.exe not found"
          exit 1
        }

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: pastella-miner-windows-x64
        path: build/Release/pastella-miner.exe
        retention-days: 30

  build-linux:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libssl-dev gcc-11 g++-11

    - name: Setup GCC 11 for CUDA compatibility
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
        gcc --version
        g++ --version

    - name: Install CUDA Toolkit via APT
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
        sudo dpkg -i cuda-keyring_1.0-1_all.deb
        sudo apt-get update
        sudo apt-get install -y cuda-toolkit-12-1
        echo "CUDA_PATH=/usr/local/cuda-12.1" >> $GITHUB_ENV
        echo "/usr/local/cuda-12.1/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=/usr/local/cuda-12.1/lib64:${LD_LIBRARY_PATH}" >> $GITHUB_ENV

    - name: Verify CUDA installation (REQUIRED)
      run: |
        export PATH=/usr/local/cuda-12.1/bin:$PATH
        nvcc -V
        if [ $? -ne 0 ]; then
          echo "❌ CUDA Toolkit 12.1+ is REQUIRED for building Pastella Miner"
          exit 1
        fi
        echo "✅ CUDA Toolkit installed successfully"

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-12.1

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Test executable exists
      run: |
        if [ -f "build/pastella-miner" ]; then
          echo "✅ Build successful - pastella-miner found"
          ls -lh build/pastella-miner
        else
          echo "❌ Build failed - pastella-miner not found"
          exit 1
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: pastella-miner-linux-x64
        path: build/pastella-miner
        retention-days: 30

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: pastella-miner-windows-x64
        path: ./release/windows

    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: pastella-miner-linux-x64
        path: ./release/linux

    - name: Create release archives
      run: |
        cd release/windows
        zip ../../pastella-miner-windows-x64.zip pastella-miner.exe
        cd ../linux
        chmod +x pastella-miner
        tar -czf ../../pastella-miner-linux-x64.tar.gz pastella-miner
        cd ../..
        ls -lh pastella-miner-*

    - name: Determine release tag
      id: release_tag
      run: |
        if [ -n "${{ github.event.inputs.release_tag }}" ]; then
          echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=v$(date +'%Y.%m.%d')-build${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi

    - name: Read version from config
      id: get_version
      run: |
        VERSION=$(grep -oP '"version"\s*:\s*"\K[^"]+' config.json || echo "unknown")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          # Use custom release notes from workflow input
          cat << 'EOF' > release_notes.md
        ${{ github.event.inputs.release_notes }}
        EOF
        else
          # Generate default release notes
          cat << EOF > release_notes.md
        # Pastella Miner Release

        **Version**: ${{ steps.get_version.outputs.version }}
        **Build Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
        **Commit**: ${{ github.sha }}

        ## System Requirements
        - **Windows**: Windows 10/11 x64, CUDA 12.1+ (for GPU mining)
        - **Linux**: Ubuntu 20.04+, CUDA 12.1+ (for GPU mining)

        ## Downloads
        - \`pastella-miner-windows-x64.zip\` - Windows executable
        - \`pastella-miner-linux-x64.tar.gz\` - Linux executable

        ## Configuration
        Edit \`config.json\` to configure your batch size. Higher batches increase memory usage but may improve performance. Maximum recommended: 500000.

        ## Changelog
        -
        EOF
        fi
        cat release_notes.md

    - name: Create draft release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.release_tag.outputs.tag }}
        name: Pastella Miner ${{ steps.release_tag.outputs.tag }}
        body_path: release_notes.md
        draft: true
        prerelease: false
        files: |
          pastella-miner-windows-x64.zip
          pastella-miner-linux-x64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}